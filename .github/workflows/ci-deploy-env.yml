name: Build Test and Deploy

on:
  push:
    branches:
      - 'develop'
      - 'master'
      - '*deploy/*'

permissions:
  id-token: write
  contents: read

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        ports:
          - 9200:9200
          - 9300:9300
        options: |
          -e discovery.type=single-node

    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_OIDC_ROLE_TO_ASSUME }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Docker Buildx (build)
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --load \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --file ./Dockerfile ./
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Run Integration Tests
      id: run-int-tests
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        GIT_SHA: ${{ github.sha }}
        BUILD_NUMBER: ${{ github.run_number }}
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && chmod +x ./cc-test-reporter
        ./cc-test-reporter before-build
        mkdir $GITHUB_WORKSPACE/coverage
        docker run --network ${{ job.container.network }} --rm -v $GITHUB_WORKSPACE/coverage:/app/coverage ${{ steps.build-image.outputs.image }} -e APP=fetch -e DEPLOY_ENV=travis -e GITHUB_TOKEN=${{ secrets.CONFIGURATOR_TOKEN }} test_integration
        ./cc-test-reporter after-build --exit-code 0 -t simplecov -p /app

    - name: Docker Buildx (push)
      id: push-image-to-ecr
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        BRANCH=$(echo "${GITHUB_REF#refs/*/}" | sed 's/.*\///')
        # push with git sha
        docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --output "type=image,push=true" \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --file ./Dockerfile ./
        # push docker tag to indicate branch
        docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --output "type=image,push=true" \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH \
          --file ./Dockerfile ./

    - name: Kick off Terraform deploy in sysops/ if not live
      id: sysops-deploy
      run: |
        BRANCH=$(echo "${GITHUB_REF#refs/*/}" | sed 's/.*\///')
        if [[ "$BRANCH" != master ]]; then
          curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.SYSOPS_RW_GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/meedan/sysops/actions/workflows/deploy_${{ github.event.repository.name }}.yml/dispatches \
          -d '{"ref": "master", "inputs": {"git_sha": "${{ github.sha }}", "branch": "'$BRANCH'"}}'
        fi

    - name: Send Slack Notification
      id: slack-notify
      if: ${{ always() }}
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        author_name: 'Github Actions'
        icon_emoji: ':octocat:'
        fields: repo,message,author # selectable (default: repo,message)
      env:
        GITHUB_TOKEN: ${{ secrets.CONFIGURATOR_TOKEN }} # optional
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
