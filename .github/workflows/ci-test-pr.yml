name: Build and Run Integration Test

on:
  pull_request

jobs:
  integration-test:
    runs-on: ubuntu-latest

    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
        ports:
          - 9200:9200
          - 9300:9300
        options: |
          -e discovery.type=single-node

    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.TEST_AWS_ROLE_TO_ASSUME }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v3

    - name: Cache Docker layers
      uses: actions/cache@v2
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Docker Buildx (build)
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --load \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --file ./Dockerfile ./
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Add Fixed Delay
      id: perform-delay
      run: |
        sleep 30

    - name: List Dockers
      id: list-dockers
      run: |
        docker ps

    - name: Compose Up
      id: compose-up
      run: |
        docker-compose up -d

    - name: Run PR Tests
      id: run-tests
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        GIT_SHA: ${{ github.sha }}
        BUILD_NUMBER: ${{ github.run_number }}
      run: |
        if [[ "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build
          mkdir $GITHUB_WORKSPACE/coverage
          docker run --rm -v $GITHUB_WORKSPACE/coverage:/app/coverage ${{ steps.build-image.outputs.image }} -e APP=fetch -e DEPLOY_ENV=travis -e GITHUB_TOKEN=none test_unit_fork
          ./cc-test-reporter after-build --exit-code 0 -t simplecov -p /app
        else
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build
          mkdir $GITHUB_WORKSPACE/coverage
          docker run --network ${{ job.container.network }} --rm -v $GITHUB_WORKSPACE/coverage:/app/coverage ${{ steps.build-image.outputs.image }} -e APP=fetch -e DEPLOY_ENV=travis -e GITHUB_TOKEN=${{ secrets.CONFIGURATOR_TOKEN }} test_integration
          ./cc-test-reporter after-build --exit-code 0 -t simplecov -p /app
        fi
